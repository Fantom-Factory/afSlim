Overview [#overview]
********************
'afSlim' is a library for generating HTML from concise, lightweight templates. 'afSlim' is based on [Jade]`http://jade-lang.com/` for javascript and [Slim]`http://slim-lang.com/` for Ruby.

Features include:
 - indentation driven - closing tags not needed
 - CSS shortcut notation for '#id' and '.class' attributes
 - '${...}' notation to interpolate Fantom code
 - [efan]`http://repo.status302.com/doc/afEfan/#overview` template generation
 - Template nesting with *Layout* pattern.

.
 > **ALIEN-AID:** Turn 'afSlim' templates into powerful components with [afEfanExtra]`http://repo.status302.com/doc/afEfanExtra/#overview`!



Quick Start [#quickStart]
*************************
Example.slim:

pre>
doctype html
html
  head
    title afSlim Example
    meta (name="keywords" content="fantom html template language")

  body
    h1 Slim Example

    h2 Element shortcut notation:

    div#slimer This div has an ID of 'slimer'
    div.wombat This div has a class of 'wombat'
    div (style="color: red;") Attributes are specified in brackets
    div You can even embed <abbr>HTML</abbr> tags!

    | Use the pipe character for text.
      Text may also be spanned
      across multiple lines!

    // This is a Slim comment

    /! This is a HTML comment

    | Use -- to execute Fantom code
    -- echo("Hello Pips!")

    | Use == to print the result of a fantom expression
    == "Hello " + ctx["name"] + "!"

    // Use $(...) notation to embed Fantom expressions
    | Hello ${ctx["name"]}!

    // embedding Javascript is easy!
    script (type="text/javascript") |
      for (var i=0; i<3; i++) {
        console.info("Greetings from Slim!");
      }
<pre

Example.fan:

pre>
using afSlim
...
ctx  := ["name":"Emma"]
Slim().renderFromFile(`Example.slim`.toFile, ctx) // --> HTML!
<pre


Syntax [#syntax]
****************
The first non-whitespace characters of each line defines the content of the line:

pre>
.
 --  fantom code
 ==  fantom eval
 //  Slim comment
 /!  HTML comment
a-Z  HTML element
  |  plain text
<pre

> **ALIEN-AID:** Whitespace indentation is *very* important! If your HTML looks wrong, click 'Show Whitespace' in your editor /
> IDE and make sure you are not mixing up tabs and spaces.


Doctype [#doctype]
==================
Start a line with 'doctype' to print a document type. Currently only 'html' is supported:

  doctype html   -->   <!DOCTYPE html>

The doctype defines the element endings for tags. Example, 'doctype html' will ensure elements are rendered as valid HTML 5
tags as described in [W3C HTML 5 Syntax]`http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements`.



Elements [#elements]
====================
Element lines are formatted as:

pre>
  element[#id][.class][.class] [(attributes)] [text]

  div Text here           --> <div>Text here</div>
  div#wombat Text here    --> <div id="wombat">Text here</div>
  div.wombat Text here    --> <div class="wombat">Text here</div>
  div(data-type="wombat") --> <div data-type="wombat"></div>
<pre

Whitespace around the attributes is optional:

pre>
  a (href="http://fantom.org.") Fantom
  a(href="http://fantom.org.") Fantom
<pre

Attributes may also be enclosed in square brackets. Handy when using Fantom interpolation:

pre>
   div[data-type="${ calculateWombat() }"]
<pre

Use all the shortcuts together:

pre>
  div#robert.juice.media (data-on="You Tube") Rap News
  -->
  <div id="robert" class="juice media" data-on="You Tube">Rap News</div>
<pre



Slim Comments [#slimComments]
=============================
Start any line with '//' to add a slim comment.

  // This is a Slim comment

Slim comments *do not* appear in the generated html, but *do* appear in the efan template.



HTML Comments [#htmlComments]
=============================
Start any line with '/!' to add a HTML comment.

  /! This is a HTML comment   -->   <!-- This is a HTML comment -->

HTML comments *do* appear in the generated HTML.



Fantom Code [#fantomCode]
=========================
Start any line with '--' to write Fantom code. Use to call efan helper methods.

  -- echo("Hello Mum!")

Note because Slim does not have end tags, you do not specify opening or closing { curly } brackets to denote blocks of code.
Due to indentation, Slim works out where they should be.

  -- if (ctx.doughnuts.isEmpty)
    | You're not a *real* policeman!
  -- else
    ul
      -- ctx.doughnuts.each |nut|
        li ${nut.filling}



Fantom Eval [#fantomEval]
=========================
Start any line with '==' to evaluate a line of Fantom code and print it out in the template

  == ctx.doughnut.filling

The resulting string is printed raw and is *not* HTML escaped.



Plain Text [#plainText]
=======================
Any line starting with a '|' denotes plain text and is printed raw. You can even embed HTML:

  | Look at how <small>BIG</small> I am!

Unlike other line types, text may flow / span multiple lines.

pre>
  | Use the pipe character for text.
    It also lets text be spanned
    across multiple lines!
<pre

You can use '|' as the first character of an element. So the following:

pre>
  p
    | More recently, I discovered
      Fantom
      a niffty pragmatic language
<pre

May be re-written as:

pre>
  p | More recently, I discovered
      Fantom
      a niffty pragmatic language
<pre

This is handy for writing '<script>' tags:

pre>
  script (type="text/javascript") |
    console.info("Hello...");       // note the leading 2 spaces
    console.info("     ...Pips!");  // note the leading 2 spaces
<pre

Note you *must* indent the text by at least 2 whitespace characters to ensure the text is inside the '|' character.
Remember what you're actually writing is a condensed version of:

pre>
  script (type="text/javascript")
   |
    console.info("Hello...");
    console.info("     ...Pips!");
<pre

This means that, even though it looks okay to the naked eye, indenting the script by **1 Tab will not work!**

When using tabs, the following is a personal preference for formatting Slim; everything lines up nicely and text and elements
may be freely mixed. (Using '>' to show tabs):

pre>
  p>  | More recently, I discovered
  >   a (href="http://fantom.org/") Fantom
  >   | a niffty pragmatic language
  >   | which runs on Java and .NET
<pre


HTML Escaping [#htmlEscaping]
=============================
Similar to [Fantom Str interpolation]`http://fantom.org/doc/docLang/Literals.html#interpolation`, you can output Fantom
expressions *anywhere* in the template using the standard '${...}' notation;

  div Mmmm... ${ctx.doughnut.filling} is my favourite!

By default all text rendered via '${...}' is XML escaped. To print raw / unescaped text use '$${...}'. Backslash escape any
expression to ignore it and print it as is.

To summarise:
pre>
.
  ${...} escaped
 \${...} ignored
 $${...} raw / unescaped
\$${...} ignored
<pre



Layout Pattern / Nesting Templates [#nestingTemplates]
******************************************************
Just like efan, Slim templates may be nested inside one another, effectively allowing you to componentise your templates. This
is accomplished by passing body functions to the efan 'render()' method and calling 'renderBody()' to invoke it.

This is best explained in an example. Here we will use the *layout pattern*:

layout.slim:
pre>
head
  title ${ctx}
body
  == renderBody()
<pre

index.slim:
pre>
html
  == ctx.layout.render("Cranberry Whips")
    ...my cool page content...
<pre

Code to run the above example:

Index.fan:
pre>
using afSlim

class Index {
  Str renderIndex() {
    index  := Slim().compileFromFile(`index.slim` .toFile, EfanRenderer#)
    layout := Slim().compileFromFile(`layout.slim`.tofile, Str#)
    return index.render(layout)
  }
}
<pre

This produces an amalgamation of the two templates:

pre>
<html>
<head>
  <title>Cranberry Whips</title>
</head>
<body>
    ...my cool page content...
</body>
</html>
<pre



Release Notes [#releaseNotes]
*****************************

v0.0.10 [#v0.0.10]
------------------
 - Chg: Tweaked and changed the multiline text rules again and again... then updated the docs with the final(!) decision.
 - Chg: Attributes may no longer be wrapped in { curly } braces.
 - Bug: Element ID and class shortcuts could not be interpolated.

v0.0.8 [#v0.0.8]
----------------
 - New: Illegal parent / child combinations now throw 'SlimParserErrs'.
 - Bug: Cleaned up an annoying niggle around element multilines.

v0.0.6 [#v0.0.6]
----------------
 - New: re-jigged the `Slim` API and merged in methods from 'SlimCompiler'.
 - New: Compressed needless whitespace from resulting HTML templates.
 - Chg: Updated to use [afEfan 1.3]`http://repo.status302.com/doc/afEfan/#overview`

v0.0.4 [#v0.0.4]
----------------
 - Chg: Updated to use [afEfan 1.2]`http://repo.status302.com/doc/afEfan/#overview`

v0.0.2 [#v0.0.2]
----------------
 - New: Preview Release