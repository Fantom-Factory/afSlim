Overview [#overview]
********************
'Slim' is a library for generating HTML from concise, lightweight templates. 'Slim' is based on [Jade]`http://jade-lang.com/` for javascript and [Slim]`http://slim-lang.com/` for Ruby.

Features include:
 - indentation driven - closing tags not needed
 - CSS shortcut notation for '#id' and '.class' attributes
 - '${...}' notation to interpolate Fantom code
 - Configurable HTML, XHTML or XML tag endings
 - [efan]`pod:afEfan` template generation
 - Template nesting with *Layout* pattern.

.
 > **ALIEN-AID:** Turn 'Slim' templates into powerful HTML components with [efanXtra]`pod:afEfan`!



Install [#Install]
******************
Install '@{project.name}' with the Fantom Repository Manager ( [fanr]`docFanr::Tool.install` ):

  C:\> fanr install -r http://repo.status302.com/fanr/ @{pod.name}

To use in a [Fantom]`http://fantom.org/` project, add a dependency to 'build.fan':

  depends = ["sys 1.0", ..., "@{pod.name} @{pod.version}+"]



Documentation [#documentation]
******************************
Full API & fandocs are available on the [Status302 repository]`http://repo.status302.com/doc/@{pod.name}/`.



Quick Start [#quickStart]
*************************
1). Create a text file called 'Example.slim'
pre>
-? using concurrent
doctype html
html
  head
    title afSlim Example
    meta (name="keywords" content="fantom html template language")

  body
    h1 Slim Example

    h2 Element shortcut notation:

    div#slimer This div has an ID of 'slimer'
    div.wombat This div has a class of 'wombat'
    div (style="color: red;") Attributes are specified in brackets
    div You can even embed <abbr>HTML</abbr> tags!

    | Use the pipe character for text
      that may be spanned across
      multiple lines!

    // This is a single line comment

    /* This is a block...
       .. or multiline comment

    /! This is a HTML comment

    // Use -- to execute Fantom code
    -- echo("Hello Pips!")

    // Use == to print the result of a Fantom expression
    == "Hello " + ctx["name"] + "!"

    // Use $(...) notation to embed Fantom expressions
    | Hello ${ ctx["name"] }!

    // Embedding Javascript is easy!
    script (type="text/javascript") |
      for (var i=0; i<3; i++) {
        console.info("Greetings from Slim!");
      }

    // Use ';' to condense elements onto one line
    ul; li; a (href="#") One line!
<pre

2). Create a text file called 'Example.fan':
pre>
syntax: fantom

using afSlim

class Example {
    Void main() {
        ctx  := ["name":"Emma"]
        html := Slim().renderFromFile(`Example.slim`.toFile, ctx)
        echo(html)
    }
}
<pre

3). Run 'Example.fan' as a Fantom script from the command line:
pre>
syntax: html

C:\> fan Example.fan
<!DOCTYPE html>
<html>
    <head>
        <title>afSlim Example</title>
        <meta name="keywords" content="fantom html template language">
    </head>
    <body>
        <h1>Slim Example</h1>
    ....
    ....
<pre



Syntax [#syntax]
****************
The first non-whitespace characters of each line defines the content of the line:

pre>
doctype : <!DOCTYPE ... >
    -?  : using statement
    --  : fantom code
    ==  : fantom eval
    //  : single line comment
    /*  : block comment
    /!  : HTML comment (single line only)
   a-Z  : HTML element
     |  : plain text
<pre

> **ALIEN-AID:** Whitespace indentation is *very* important! If your HTML looks wrong, click 'Show Whitespace' in your editor /
> IDE and make sure you are not mixing up tabs and spaces.


Doctype [#doctype]
==================
Start a line with 'doctype' to print a document type. The common type would be 'html':

  doctype html
    <!DOCTYPE html>

If you specify a doctype of 'xml' then what follows is taken to be the charset and is printed with the XML processing
instruction. (In this case, the directive 'doctype' is a bit of a misnomer.)

  doctype xml ISO-8859-1
    <?xml version="1.0" encoding="ISO-8859-1" ?>

Supported XHTML Doctypes:

  doctype xhtml
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
      "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

  doctype xhtml strict
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

  doctype xhtml frameset
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">

  doctype xhtml mobile
    <!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN"
    "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">

  doctype xhtml basic
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
      "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">

  doctype xhtml transitional
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

Supported HTML4 Doctypes:

  doctype html4
    <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
      "http://www.w3.org/TR/html4/strict.dtd">

  doctype html4 frameset
    <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN"
      "http://www.w3.org/TR/html4/frameset.dtd">

  doctype html4 transitional
    <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
      "http://www.w3.org/TR/html4/loose.dtd">

Note that the 'doctype' directive is just a short hand notation for common DOCTYPE declarations, it does not enforce constaints
on your template or alter it in any way.

To print custom DOCTYPE declarations, use the '|' character to print a standard string:

  | <!DOCTYPE wotever PUBLIC "http://www.wotever.com">



Using Statements [#usingStatements]
===================================
Start any line with '-?' to add a Fantom using statement.

  -? using afSlim

The 'using statement' means you don't have to use fully qualified class names:

  -? using concurrent
  == Actor.locals("my.value")



Elements [#elements]
====================
Element lines are formatted as:

pre>
  element[#id][.class][.class] [(attributes)] [text]

  div Text here           --> <div>Text here</div>
  div#wombat Text here    --> <div id="wombat">Text here</div>
  div.wombat Text here    --> <div class="wombat">Text here</div>
  div(data-type="wombat") --> <div data-type="wombat"></div>
<pre

Whitespace before the attribute brackets is optional:

pre>
  a (href="http://www.fantomfactory.org") Fantom
  a(href="http://www.fantomfactory.org") Fantom
<pre

Attributes may also be enclosed in square brackets:

pre>
   div[data-type="wombat"]
<pre

Use all the shortcuts together:

pre>
  div#robert.juice.media (data-on="You Tube") Rap News

  <div id="robert" class="juice media" data-on="You Tube">Rap News</div>
<pre

Note that attribute contents are not parsed. Whatever is inbetween the '(' - ')' or '[' - ']' is rendered exactly as is. This means you should not mix 'id' and 'class' attributes with shortcut notation as this would result in two 'id' and 'class' attributes, which would be invalid.

  div#top (id="bottom")

  <div id="top" id="bottom"></div>

If the text of an element needs to start with a bracket, then use empty attribute notation to avoid confusion:

  div() (In Brackets)

  <div>(In Brackets)</div>

If an element has no text, then it may be immediatly followed by a semi-colon ';' to start a fresh line.
This concise syntax prevents '<li>', and other empty elements, from taking up a whole line of their own.

pre>
  ul
    li; a (href="#") home
    li; span.highlight other page
    li; == ctx.otherPage
<pre



Single Line Comments [#singleLineComments]
==========================================
Start any line with '//' to add a comment.

  // This is a comment
      div This is still rendered

Comments *do not* appear in the generated html, but *do* appear in the efan template.



Block Comments [#blockComments]
===============================
Start any line with '/*' to add a block comment.

  /* This is a Block comment
       Block comments span multiple lines
         And are great for temporarily removing chunks of HTML

Block comments *do not* appear in the generated html, but *do* appear in the efan template.



HTML Comments [#htmlComments]
=============================
Start any line with '/!' to add a HTML comment.

  /! This is a HTML comment

becomes

  <!-- This is a HTML comment -->

HTML comments *do* appear in the generated HTML.



Fantom Code [#fantomCode]
=========================
Start any line with '--' to write Fantom code. Use to call efan helper methods.

  -- echo("Hello Mum!")

Note because Slim does not have end tags, you do not specify opening or closing { curly } brackets to denote blocks of code.
Due to indentation, Slim works out where they should be.

  -- if (ctx.doughnuts.isEmpty)
    p You're not a *real* policeman!
  -- else
    ul
      -- ctx.doughnuts.each |nut|
        li Mmm... ${nut.filling}!



Fantom Eval [#fantomEval]
=========================
Start any line with '==' to evaluate a line of Fantom code and print it out in the template

  == ctx.doughnut.filling

The resulting string is printed raw and is *not* HTML escaped.



Plain Text [#plainText]
=======================
Any line starting with a '|' denotes plain text and is printed raw. You can even embed HTML:

  | Look at how <small>BIG</small> I am!

Unlike other line types, text may flow / span multiple lines.

pre>
  | Use the pipe character for text.
    It also lets text be spanned
    across multiple lines!
<pre

You can use '|' as the first character of an element. So the following:

pre>
  p
    | More recently, I discovered
      Fantom
      a niffty pragmatic language
<pre

May be re-written as:

pre>
  p | More recently, I discovered
      Fantom
      a niffty pragmatic language
<pre

This is handy for writing '<script>' tags:

pre>
  script (type="text/javascript") |
    console.info("Hello...");
    console.info("     ...Pips!");
<pre

Text may be mixed with elements:

pre>
  p
    | More recently, I discovered
    a (href="http://fantom.org/") FANTOM
    |  a niffty pragmatic language (*)
    | which runs on Java and .NET
<pre

(*) Note the extra leading space at the start of the line. This prevents it from butting up against the previous '<a>' tag:

  ... FANTOM a niffty pragmatic language

and not

  ... FANTOMa niffty pragmatic language

Slim trims 1 character of whitespace after a '|' and preserves trailing whitespace.



HTML Escaping [#htmlEscaping]
=============================
Similar to [Fantom Str interpolation]`http://fantom.org/doc/docLang/Literals.html#interpolation`, you can output Fantom
expressions *anywhere* in the template using the standard '${...}' notation;

  div Mmmm... ${ctx.doughnut.filling} is my favourite!

By default all text rendered via '${...}' is XML escaped. To print raw / unescaped text use '$${...}'. Backslash escape any
expression to ignore it and print it as is.

To summarise:
pre>
.
  ${...} : XML escaped
 \${...} : ignored
 $${...} : raw / unescaped
\$${...} : ignored
<pre

For simple expressions, the curly brackets may be omitted:

  div Mmmm... $ctx.doughnut.filling is my favourite!



Layout Pattern / Nesting Templates [#nestingTemplates]
******************************************************
Just like efan, Slim templates may be nested inside one another, effectively allowing you to componentise your templates. This
is accomplished by passing body functions to the efan 'render()' method and calling 'renderBody()' to invoke it.

This is best explained in an example. Here we will use the *layout pattern*:

layout.slim:
pre>
head
  title ${ctx}
body
  == renderBody()
<pre

index.slim:
pre>
html
  == ctx.layout.render("Cranberry Whips")
    ...my cool page content...
<pre

Code to run the above example:

Index.fan:
pre>
syntax: fantom

using afSlim

class Index {
  Str renderIndex() {
    index  := Slim().compileFromFile(`index.slim` .toFile, EfanRenderer#)
    layout := Slim().compileFromFile(`layout.slim`.tofile, Str#)
    return index.render(layout)
  }
}
<pre

This produces an amalgamation of the two templates:

pre>
syntax: html

<html>
<head>
  <title>Cranberry Whips</title>
</head>
<body>
    ...my cool page content...
</body>
</html>
<pre

Note that when using the raw efan 'render()' method, you should always pass in a ctx, even if it is null.
This prevents confusion between the ctx and the body method:

pre>
html
  == ctx.layout.render(null)
    ...my cool page content...
<pre



HTML vs XHTML vs XML [#htmlVsXhtmlVsXml]
****************************************

HTML [#html]
============
By default 'Slim' renders tags as HTML5 elements; that is, all tags representing
[void elements]`http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements` such as 'meta', 'br' and 'input' are
printed without an end tag:

  <input type="submit">
  <br>

Warnings are logged should a void element NOT be empty.

HTML5 documents should be served up (from a web / app server such as [BedSheet]`http://www.fantomfactory.org/pods/afBedSheet`)
with a 'Content-Type' of:

  text/html

While HTML is nice for browsers, this format doesn't lend itself to XML parsing; should you wish to use
[Sizzle]`http://www.fantomfactory.org/pods/afSizzle` for instance. So 'Slim' offers alternative renderings of tag endings.

XHTML [#xhtml]
==============
By creating `Slim` with a `TagStyle` of 'xhtml' all [void elements]`http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements`
are rendered as a self-closing tags.
Warnings are logged should a void element NOT be empty.

  <input type="submit" />
  <br />

All non void elements are *NOT* rendered as self closing, even when empty.

  <script></script>

XHTML documents should be served up with a 'Content-Type' of:

  application/xhtml+xml

Note that Internet Explorer versions 8 and below are reported not to accept this MimeType, resulting in a download dialogue box
shown to the user.

> Note that XHTML files **must** declare the xhtml namespace in the html tag or browsers will **not** render the page. Example:

  <!DOCTYPE html>
  <html xmlns="http://www.w3.org/1999/xhtml">
    ...
  </html>

XML [#xml]
==========
If you create `Slim` with a `TagStyle` of 'xml' then *ALL* empty tags are self-closing and void tags have no special meaning.
Use this style when Slim is to create pure XML documents.

[Depending on usage]`http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons` XML documents may be served up with a 'Content-Type' of either:

  text/xml
  application/xml



Release Notes [#releaseNotes]
*****************************
v1.1.18 [#v1.1.18]
==================
 - Bug: Code interpolation in #ID and .class shortcuts may now contain spaces, e.g. 'div#${ wot.ever }.${ wot.ever }'

v1.1.16 [#v1.1.16]
==================
 - Chg: Curly brackets may be omitted for simple interpolation expressions.
 - Chg: Javascript style text sections need only be indented by one space.

v1.1.14 [#v1.1.14]
==================
 - New: Empty elements may immeditatly be followed by ';' to put multiple lines on one, e.g. 'li; a(href="#"); span.highlight Hello!'
 - Bug: Dot seperated statements in interpolation may now be used in id and class shortcut notation, e.g. 'div#${wot.ever}.${wot.ever}'

v1.1.12 [#v1.1.12]
==================
 - Chg: Brackets in attributes may now be nested: 'div (class="${wotever()}")'
 - Chg: Now uses [Pegger]`pod:afPegger`.

v1.1.10 [#v1.1.10]
==================
 - Bug: Text elements could not contain empty lines; important for '<pre>' tags.

v1.1.8 [#v1.1.8]
==================
 - Bug: Could not nest block comments in code or eval statements.

v1.1.6 [#v1.1.6]
================
 - New: Added block comments, specify with '/*'
 - Bug: Single line comments weren't escaped.

v1.1.4 [#v1.1.4]
================
 - Chg: Updated to [efan 1.4.0]`pod:afEfan`.

v1.1.2 [#v1.1.2]
================
 - Bug: Could not start a line with the '|' char, when printing multiline text.

v1.1.0 [#v1.1.0]
================
 - New: Support for HTML, XHTML and XML style tag endings.
 - New: Support for multiple 'doctype' declarations.
 - New: '<%' and '%>' escaping means EJS can be embedded in 'Slim' templates!
 - Bug: Null values no longer thow an NPE but print 'null'.
 - Bug: Brackets in text could be mistaken for attributes. (Potential breaking change)

v1.0.2 [#v1.0.2]
================
 - Bug: Could not mix interpolated ID and class notation with attributes.
 - Bug: Multiline text was not being escaped / interpolated.

v1.0.0 [#v1.0.0]
================
 - Chg: Tweaked and changed the multiline text rules again and again... then updated the docs with the final(!) decision.
 - Chg: Attributes may no longer be wrapped in { curly } braces.
 - Chg: Text may have leading space to prevent them from butting up against previous elements.
 - Bug: Element ID and class shortcuts could not be interpolated.

v0.0.8 [#v0.0.8]
================
 - New: Illegal parent / child combinations now throw 'SlimParserErrs'.
 - Bug: Cleaned up an annoying niggle around element multilines.

v0.0.6 [#v0.0.6]
================
 - New: re-jigged the `Slim` API and merged in methods from 'SlimCompiler'.
 - New: Compressed needless whitespace from resulting HTML templates.
 - Chg: Updated to use [afEfan 1.3]`http://www.fantomfactory.org/pods/afEfan`

v0.0.4 [#v0.0.4]
================
 - Chg: Updated to use [afEfan 1.2]`http://www.fantomfactory.org/pods/afEfan`

v0.0.2 [#v0.0.2]
================
 - New: Preview Release